
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000928  08000930  00001930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000928  08000928  00001930  2**0
                  CONTENTS
  4 .ARM          00000000  08000928  08000928  00001930  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000928  08000930  00001930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000928  08000928  00001928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800092c  0800092c  0000192c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001930  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a03  00000000  00000000  0000195a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002db  00000000  00000000  0000235d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008b  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015da  00000000  00000000  0000278b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000edb  00000000  00000000  00003d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005811  00000000  00000000  00004c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000a451  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000268  00000000  00000000  0000a494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0000a6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000910 	.word	0x08000910

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000910 	.word	0x08000910

080001c8 <main>:

#include "stm32f4xx.h"

void delay(void);

int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0

	GPIO_Handle_t led = {0}, btn = {0};
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	463b      	mov	r3, r7
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]

	led.pGPIOx = GPIOD;
 80001e4:	4b14      	ldr	r3, [pc, #80]	@ (8000238 <main+0x70>)
 80001e6:	60fb      	str	r3, [r7, #12]

	led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80001e8:	230f      	movs	r3, #15
 80001ea:	743b      	strb	r3, [r7, #16]
	led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 80001ec:	2301      	movs	r3, #1
 80001ee:	747b      	strb	r3, [r7, #17]
	led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_VH;
 80001f0:	2303      	movs	r3, #3
 80001f2:	74bb      	strb	r3, [r7, #18]
	led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTY_PUSPUL;
 80001f4:	2300      	movs	r3, #0
 80001f6:	753b      	strb	r3, [r7, #20]
	led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 80001f8:	2300      	movs	r3, #0
 80001fa:	74fb      	strb	r3, [r7, #19]

    GPIO_Init(&led);
 80001fc:	f107 030c 	add.w	r3, r7, #12
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f8f5 	bl	80003f0 <GPIO_Init>

	btn.pGPIOx = GPIOA;
 8000206:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <main+0x74>)
 8000208:	603b      	str	r3, [r7, #0]

	btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 800020a:	2304      	movs	r3, #4
 800020c:	713b      	strb	r3, [r7, #4]
	btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INP_FE_T;
 800020e:	2304      	movs	r3, #4
 8000210:	717b      	strb	r3, [r7, #5]
	btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_VH;
 8000212:	2303      	movs	r3, #3
 8000214:	71bb      	strb	r3, [r7, #6]
	btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 8000216:	2300      	movs	r3, #0
 8000218:	71fb      	strb	r3, [r7, #7]




    GPIO_Init(&btn);
 800021a:	463b      	mov	r3, r7
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f8e7 	bl	80003f0 <GPIO_Init>

   // IRQ Configuration
    GPIO_InterruptPriorityConfig(IRQ_EXTI4, NVIC_IRQ_PRIORITY_15);
 8000222:	210f      	movs	r1, #15
 8000224:	200a      	movs	r0, #10
 8000226:	f000 fb05 	bl	8000834 <GPIO_InterruptPriorityConfig>
    GPIO_InterruptConfig(IRQ_EXTI4, ENABLE);
 800022a:	2101      	movs	r1, #1
 800022c:	200a      	movs	r0, #10
 800022e:	f000 fa7b 	bl	8000728 <GPIO_InterruptConfig>

    while(1);
 8000232:	bf00      	nop
 8000234:	e7fd      	b.n	8000232 <main+0x6a>
 8000236:	bf00      	nop
 8000238:	40020c00 	.word	0x40020c00
 800023c:	40020000 	.word	0x40020000

08000240 <delay>:

//	return 0;
}


void delay(void){
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000/2; i++);
 8000246:	2300      	movs	r3, #0
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	e002      	b.n	8000252 <delay+0x12>
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	3301      	adds	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a04      	ldr	r2, [pc, #16]	@ (8000268 <delay+0x28>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d9f8      	bls.n	800024c <delay+0xc>
}
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	0003d08f 	.word	0x0003d08f

0800026c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	delay();
 8000270:	f7ff ffe6 	bl	8000240 <delay>
	GPIO_IRQHandler(GPIO_PIN_NO_4);
 8000274:	2004      	movs	r0, #4
 8000276:	f000 fb07 	bl	8000888 <GPIO_IRQHandler>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 800027a:	210f      	movs	r1, #15
 800027c:	4802      	ldr	r0, [pc, #8]	@ (8000288 <EXTI4_IRQHandler+0x1c>)
 800027e:	f000 fa3f 	bl	8000700 <GPIO_ToggleOutputPin>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40020c00 	.word	0x40020c00

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	@ (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	@ (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	@ (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	@ (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 fb05 	bl	80008c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ff83 	bl	80001c8 <main>

080002c2 <LoopForever>:

LoopForever:
  b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000930 	.word	0x08000930
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <GPIO_PeriphControl>:
 *
 *@return								- none
 *
 *@Note									- none
 */
void GPIO_PeriphControl(GPIO_Reg_t *pGPIOx, uint8_t EnorDis){
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDis == ENABLE){
 80002ec:	78fb      	ldrb	r3, [r7, #3]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d136      	bne.n	8000360 <GPIO_PeriphControl+0x80>
		if(pGPIOx == GPIOA){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a38      	ldr	r2, [pc, #224]	@ (80003d8 <GPIO_PeriphControl+0xf8>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriphControl+0x28>
			GPIOA_PCLK_EN();
 80002fa:	4b38      	ldr	r3, [pc, #224]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fe:	4a37      	ldr	r2, [pc, #220]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6313      	str	r3, [r2, #48]	@ 0x30
		}
		else if(pGPIOx == GPIOE){
			GPIOE_PCLK_DI();
		}
	}
}
 8000306:	e061      	b.n	80003cc <GPIO_PeriphControl+0xec>
		else if(pGPIOx == GPIOB){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a35      	ldr	r2, [pc, #212]	@ (80003e0 <GPIO_PeriphControl+0x100>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriphControl+0x3e>
			GPIOB_PCLK_EN();
 8000310:	4b32      	ldr	r3, [pc, #200]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000314:	4a31      	ldr	r2, [pc, #196]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800031c:	e056      	b.n	80003cc <GPIO_PeriphControl+0xec>
		else if(pGPIOx == GPIOC){
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a30      	ldr	r2, [pc, #192]	@ (80003e4 <GPIO_PeriphControl+0x104>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriphControl+0x54>
			GPIOC_PCLK_EN();
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	4a2c      	ldr	r2, [pc, #176]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000332:	e04b      	b.n	80003cc <GPIO_PeriphControl+0xec>
		else if(pGPIOx == GPIOD){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a2c      	ldr	r2, [pc, #176]	@ (80003e8 <GPIO_PeriphControl+0x108>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriphControl+0x6a>
			GPIOD_PCLK_EN();
 800033c:	4b27      	ldr	r3, [pc, #156]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000340:	4a26      	ldr	r2, [pc, #152]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000348:	e040      	b.n	80003cc <GPIO_PeriphControl+0xec>
		else if(pGPIOx == GPIOE){
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a27      	ldr	r2, [pc, #156]	@ (80003ec <GPIO_PeriphControl+0x10c>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d13c      	bne.n	80003cc <GPIO_PeriphControl+0xec>
			GPIOE_PCLK_EN();
 8000352:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	4a21      	ldr	r2, [pc, #132]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035e:	e035      	b.n	80003cc <GPIO_PeriphControl+0xec>
		if(pGPIOx == GPIOA){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a1d      	ldr	r2, [pc, #116]	@ (80003d8 <GPIO_PeriphControl+0xf8>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PeriphControl+0x96>
			GPIOA_PCLK_DI();
 8000368:	4b1c      	ldr	r3, [pc, #112]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a1b      	ldr	r2, [pc, #108]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 800036e:	f023 0301 	bic.w	r3, r3, #1
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000374:	e02a      	b.n	80003cc <GPIO_PeriphControl+0xec>
		else if(pGPIOx == GPIOB){
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a19      	ldr	r2, [pc, #100]	@ (80003e0 <GPIO_PeriphControl+0x100>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriphControl+0xac>
			GPIOB_PCLK_DI();
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000382:	4a16      	ldr	r2, [pc, #88]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000384:	f023 0302 	bic.w	r3, r3, #2
 8000388:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038a:	e01f      	b.n	80003cc <GPIO_PeriphControl+0xec>
		else if(pGPIOx == GPIOC){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a15      	ldr	r2, [pc, #84]	@ (80003e4 <GPIO_PeriphControl+0x104>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriphControl+0xc2>
			GPIOC_PCLK_DI();
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000398:	4a10      	ldr	r2, [pc, #64]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 800039a:	f023 0304 	bic.w	r3, r3, #4
 800039e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a0:	e014      	b.n	80003cc <GPIO_PeriphControl+0xec>
		else if(pGPIOx == GPIOD){
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a10      	ldr	r2, [pc, #64]	@ (80003e8 <GPIO_PeriphControl+0x108>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriphControl+0xd8>
			GPIOD_PCLK_DI();
 80003aa:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ae:	4a0b      	ldr	r2, [pc, #44]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 80003b0:	f023 0308 	bic.w	r3, r3, #8
 80003b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b6:	e009      	b.n	80003cc <GPIO_PeriphControl+0xec>
		else if(pGPIOx == GPIOE){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a0c      	ldr	r2, [pc, #48]	@ (80003ec <GPIO_PeriphControl+0x10c>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d105      	bne.n	80003cc <GPIO_PeriphControl+0xec>
			GPIOE_PCLK_DI();
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c4:	4a05      	ldr	r2, [pc, #20]	@ (80003dc <GPIO_PeriphControl+0xfc>)
 80003c6:	f023 0310 	bic.w	r3, r3, #16
 80003ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40020000 	.word	0x40020000
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020400 	.word	0x40020400
 80003e4:	40020800 	.word	0x40020800
 80003e8:	40020c00 	.word	0x40020c00
 80003ec:	40021000 	.word	0x40021000

080003f0 <GPIO_Init>:
 *
 *@return								- none
 *
 *@Note									- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	// Enable Peripheral clock
	GPIO_PeriphControl(pGPIOHandle->pGPIOx, ENABLE);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2101      	movs	r1, #1
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff6e 	bl	80002e0 <GPIO_PeriphControl>

	//1. Configure MODE of GPIO
	uint32_t temp = 0; //hold register mode temporary
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	795b      	ldrb	r3, [r3, #5]
 800040c:	2b03      	cmp	r3, #3
 800040e:	d81f      	bhi.n	8000450 <GPIO_Init+0x60>
		//Mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	795b      	ldrb	r3, [r3, #5]
 8000414:	461a      	mov	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	791b      	ldrb	r3, [r3, #4]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	fa02 f303 	lsl.w	r3, r2, r3
 8000420:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 	    				//clearing
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	4619      	mov	r1, r3
 800042e:	2303      	movs	r3, #3
 8000430:	408b      	lsls	r3, r1
 8000432:	43db      	mvns	r3, r3
 8000434:	4619      	mov	r1, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	400a      	ands	r2, r1
 800043c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; 																		// setting
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	6819      	ldr	r1, [r3, #0]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	697a      	ldr	r2, [r7, #20]
 800044a:	430a      	orrs	r2, r1
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	e0a8      	b.n	80005a2 <GPIO_Init+0x1b2>

	}else{
		// Configure GPIO port to selection  in SYSCG
		/* Interrupt mode, at peripheral side */
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INP_FE_T){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	795b      	ldrb	r3, [r3, #5]
 8000454:	2b04      	cmp	r3, #4
 8000456:	d125      	bne.n	80004a4 <GPIO_Init+0xb4>
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	4619      	mov	r1, r3
 8000464:	2303      	movs	r3, #3
 8000466:	408b      	lsls	r3, r1
 8000468:	43db      	mvns	r3, r3
 800046a:	4619      	mov	r1, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	400a      	ands	r2, r1
 8000472:	601a      	str	r2, [r3, #0]
			//1. Falling Edge trigger configured
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 					    				// set falling edge
 8000474:	4b9a      	ldr	r3, [pc, #616]	@ (80006e0 <GPIO_Init+0x2f0>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	7912      	ldrb	r2, [r2, #4]
 800047c:	4611      	mov	r1, r2
 800047e:	2201      	movs	r2, #1
 8000480:	408a      	lsls	r2, r1
 8000482:	4611      	mov	r1, r2
 8000484:	4a96      	ldr	r2, [pc, #600]	@ (80006e0 <GPIO_Init+0x2f0>)
 8000486:	430b      	orrs	r3, r1
 8000488:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 					   					// reset rising edge
 800048a:	4b95      	ldr	r3, [pc, #596]	@ (80006e0 <GPIO_Init+0x2f0>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	7912      	ldrb	r2, [r2, #4]
 8000492:	4611      	mov	r1, r2
 8000494:	2201      	movs	r2, #1
 8000496:	408a      	lsls	r2, r1
 8000498:	43d2      	mvns	r2, r2
 800049a:	4611      	mov	r1, r2
 800049c:	4a90      	ldr	r2, [pc, #576]	@ (80006e0 <GPIO_Init+0x2f0>)
 800049e:	400b      	ands	r3, r1
 80004a0:	6093      	str	r3, [r2, #8]
 80004a2:	e035      	b.n	8000510 <GPIO_Init+0x120>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INP_RE_T){
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	795b      	ldrb	r3, [r3, #5]
 80004a8:	2b05      	cmp	r3, #5
 80004aa:	d117      	bne.n	80004dc <GPIO_Init+0xec>
			//2. Rising Edge trigger configured
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 					     				// set rising edge
 80004ac:	4b8c      	ldr	r3, [pc, #560]	@ (80006e0 <GPIO_Init+0x2f0>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	7912      	ldrb	r2, [r2, #4]
 80004b4:	4611      	mov	r1, r2
 80004b6:	2201      	movs	r2, #1
 80004b8:	408a      	lsls	r2, r1
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a88      	ldr	r2, [pc, #544]	@ (80006e0 <GPIO_Init+0x2f0>)
 80004be:	430b      	orrs	r3, r1
 80004c0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 					     				// reset falling edge
 80004c2:	4b87      	ldr	r3, [pc, #540]	@ (80006e0 <GPIO_Init+0x2f0>)
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	7912      	ldrb	r2, [r2, #4]
 80004ca:	4611      	mov	r1, r2
 80004cc:	2201      	movs	r2, #1
 80004ce:	408a      	lsls	r2, r1
 80004d0:	43d2      	mvns	r2, r2
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a82      	ldr	r2, [pc, #520]	@ (80006e0 <GPIO_Init+0x2f0>)
 80004d6:	400b      	ands	r3, r1
 80004d8:	60d3      	str	r3, [r2, #12]
 80004da:	e019      	b.n	8000510 <GPIO_Init+0x120>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INP_FERE_T){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	795b      	ldrb	r3, [r3, #5]
 80004e0:	2b06      	cmp	r3, #6
 80004e2:	d115      	bne.n	8000510 <GPIO_Init+0x120>
			//3.  Both Falling and Rising Edge trigger configured
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 						 				// set falling edge
 80004e4:	4b7e      	ldr	r3, [pc, #504]	@ (80006e0 <GPIO_Init+0x2f0>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	7912      	ldrb	r2, [r2, #4]
 80004ec:	4611      	mov	r1, r2
 80004ee:	2201      	movs	r2, #1
 80004f0:	408a      	lsls	r2, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	4a7a      	ldr	r2, [pc, #488]	@ (80006e0 <GPIO_Init+0x2f0>)
 80004f6:	430b      	orrs	r3, r1
 80004f8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 						 				// set rising edge
 80004fa:	4b79      	ldr	r3, [pc, #484]	@ (80006e0 <GPIO_Init+0x2f0>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	7912      	ldrb	r2, [r2, #4]
 8000502:	4611      	mov	r1, r2
 8000504:	2201      	movs	r2, #1
 8000506:	408a      	lsls	r2, r1
 8000508:	4611      	mov	r1, r2
 800050a:	4a75      	ldr	r2, [pc, #468]	@ (80006e0 <GPIO_Init+0x2f0>)
 800050c:	430b      	orrs	r3, r1
 800050e:	6093      	str	r3, [r2, #8]
		}

		SYSCFG_PCLK_EN();
 8000510:	4b74      	ldr	r3, [pc, #464]	@ (80006e4 <GPIO_Init+0x2f4>)
 8000512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000514:	4a73      	ldr	r2, [pc, #460]	@ (80006e4 <GPIO_Init+0x2f4>)
 8000516:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800051a:	6453      	str	r3, [r2, #68]	@ 0x44
		uint8_t temp1, temp2;
		uint8_t portCode = GPIO_BASE_TO_PORTCODE(pGPIOHandle->pGPIOx);								   				// REturn the port code(PA...PI for the EXTI register
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a71      	ldr	r2, [pc, #452]	@ (80006e8 <GPIO_Init+0x2f8>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d01d      	beq.n	8000562 <GPIO_Init+0x172>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a70      	ldr	r2, [pc, #448]	@ (80006ec <GPIO_Init+0x2fc>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d016      	beq.n	800055e <GPIO_Init+0x16e>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a6e      	ldr	r2, [pc, #440]	@ (80006f0 <GPIO_Init+0x300>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d00f      	beq.n	800055a <GPIO_Init+0x16a>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a6d      	ldr	r2, [pc, #436]	@ (80006f4 <GPIO_Init+0x304>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d008      	beq.n	8000556 <GPIO_Init+0x166>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a6b      	ldr	r2, [pc, #428]	@ (80006f8 <GPIO_Init+0x308>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d101      	bne.n	8000552 <GPIO_Init+0x162>
 800054e:	2304      	movs	r3, #4
 8000550:	e008      	b.n	8000564 <GPIO_Init+0x174>
 8000552:	2300      	movs	r3, #0
 8000554:	e006      	b.n	8000564 <GPIO_Init+0x174>
 8000556:	2303      	movs	r3, #3
 8000558:	e004      	b.n	8000564 <GPIO_Init+0x174>
 800055a:	2302      	movs	r3, #2
 800055c:	e002      	b.n	8000564 <GPIO_Init+0x174>
 800055e:	2301      	movs	r3, #1
 8000560:	e000      	b.n	8000564 <GPIO_Init+0x174>
 8000562:	2300      	movs	r3, #0
 8000564:	74fb      	strb	r3, [r7, #19]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;                                	   				// Select which EXTI(0...3) register to Configure
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	74bb      	strb	r3, [r7, #18]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;									   				// Select which EXTI?(0...15) bit to store values
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	f003 0303 	and.w	r3, r3, #3
 8000576:	747b      	strb	r3, [r7, #17]
																					   	   	   	   	   	   	   	   	// Enable SYSCFG clock
		SYSCFG->EXTICR[temp1] = (portCode << (4 * temp2));											   				// Select EXTIx register and the respective bits
 8000578:	7cfa      	ldrb	r2, [r7, #19]
 800057a:	7c7b      	ldrb	r3, [r7, #17]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	fa02 f103 	lsl.w	r1, r2, r3
 8000582:	4a5e      	ldr	r2, [pc, #376]	@ (80006fc <GPIO_Init+0x30c>)
 8000584:	7cbb      	ldrb	r3, [r7, #18]
 8000586:	3302      	adds	r3, #2
 8000588:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Interrupt request from line x is not masked or disabled
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	4b54      	ldr	r3, [pc, #336]	@ (80006e0 <GPIO_Init+0x2f0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	4611      	mov	r1, r2
 800059c:	4a50      	ldr	r2, [pc, #320]	@ (80006e0 <GPIO_Init+0x2f0>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]

	//2. Configure Speed of GPIO
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	799b      	ldrb	r3, [r3, #6]
 80005aa:	461a      	mov	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 			  			// clearing
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	689a      	ldr	r2, [r3, #8]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	4619      	mov	r1, r3
 80005c4:	2303      	movs	r3, #3
 80005c6:	408b      	lsls	r3, r1
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	400a      	ands	r2, r1
 80005d2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; 																  			// setting
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	6899      	ldr	r1, [r3, #8]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	697a      	ldr	r2, [r7, #20]
 80005e0:	430a      	orrs	r2, r1
 80005e2:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]

	//3. Configure Pull up Pull down of GPIO
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	79db      	ldrb	r3, [r3, #7]
 80005ec:	461a      	mov	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 							// clearing
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68da      	ldr	r2, [r3, #12]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	4619      	mov	r1, r3
 8000606:	2303      	movs	r3, #3
 8000608:	408b      	lsls	r3, r1
 800060a:	43db      	mvns	r3, r3
 800060c:	4619      	mov	r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	400a      	ands	r2, r1
 8000614:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; 																			//setting
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68d9      	ldr	r1, [r3, #12]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	430a      	orrs	r2, r1
 8000624:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]

	//4. Configure Output Type of GPIO
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	7a1b      	ldrb	r3, [r3, #8]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 						// clearing
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	4619      	mov	r1, r3
 8000646:	2301      	movs	r3, #1
 8000648:	408b      	lsls	r3, r1
 800064a:	43db      	mvns	r3, r3
 800064c:	4619      	mov	r1, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	400a      	ands	r2, r1
 8000654:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; 																		//setting
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6859      	ldr	r1, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	430a      	orrs	r2, r1
 8000664:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]



	//5. Alternative Function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUNC){
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	795b      	ldrb	r3, [r3, #5]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d131      	bne.n	80006d6 <GPIO_Init+0x2e6>
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	08db      	lsrs	r3, r3, #3
 8000678:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2 )); 	// clearing
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7c3a      	ldrb	r2, [r7, #16]
 800068a:	3208      	adds	r2, #8
 800068c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	220f      	movs	r2, #15
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43db      	mvns	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	7c3a      	ldrb	r2, [r7, #16]
 80006a4:	4001      	ands	r1, r0
 80006a6:	3208      	adds	r2, #8
 80006a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAlteFuncMode << (4 * temp2 ));	 	// setting
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	7c3a      	ldrb	r2, [r7, #16]
 80006b2:	3208      	adds	r2, #8
 80006b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7a5b      	ldrb	r3, [r3, #9]
 80006bc:	461a      	mov	r2, r3
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	7c3a      	ldrb	r2, [r7, #16]
 80006ce:	4301      	orrs	r1, r0
 80006d0:	3208      	adds	r2, #8
 80006d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40013c00 	.word	0x40013c00
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40013800 	.word	0x40013800

08000700 <GPIO_ToggleOutputPin>:
*
*@return								- none
*
*@Note									- none
*/
void GPIO_ToggleOutputPin(GPIO_Reg_t *pGPIOx, uint8_t PinNum){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNum);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	78fa      	ldrb	r2, [r7, #3]
 8000712:	2101      	movs	r1, #1
 8000714:	fa01 f202 	lsl.w	r2, r1, r2
 8000718:	405a      	eors	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	615a      	str	r2, [r3, #20]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <GPIO_InterruptConfig>:
 *@return								- none
 *
 *@Note									- Even though Cortex M4 has 8 Nested Vector Interrupt Controllers available (NVIC),
 *										  STM32F407 does not use more than three of this NVIC
 */
void GPIO_InterruptConfig(uint8_t IRQNum, uint8_t EnorDis){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
	if(EnorDis == ENABLE){
 8000738:	79bb      	ldrb	r3, [r7, #6]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d133      	bne.n	80007a6 <GPIO_InterruptConfig+0x7e>
		if(IRQNum <= 31){
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b1f      	cmp	r3, #31
 8000742:	d80a      	bhi.n	800075a <GPIO_InterruptConfig+0x32>
			// ISRE0 Register to be programmed
			*(NVIC_ISERO) |= (1 << IRQNum);
 8000744:	4b35      	ldr	r3, [pc, #212]	@ (800081c <GPIO_InterruptConfig+0xf4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	79fa      	ldrb	r2, [r7, #7]
 800074a:	2101      	movs	r1, #1
 800074c:	fa01 f202 	lsl.w	r2, r1, r2
 8000750:	4611      	mov	r1, r2
 8000752:	4a32      	ldr	r2, [pc, #200]	@ (800081c <GPIO_InterruptConfig+0xf4>)
 8000754:	430b      	orrs	r3, r1
 8000756:	6013      	str	r3, [r2, #0]
		} else if(IRQNum >= 64 && IRQNum <96){
			// ICRE2 Register to be programmed
			*(NVIC_ICER2) |= (1 << (IRQNum % 64));
		}
	}
}
 8000758:	e05b      	b.n	8000812 <GPIO_InterruptConfig+0xea>
		} else if(IRQNum >= 31 && IRQNum <64){
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b1e      	cmp	r3, #30
 800075e:	d90f      	bls.n	8000780 <GPIO_InterruptConfig+0x58>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b3f      	cmp	r3, #63	@ 0x3f
 8000764:	d80c      	bhi.n	8000780 <GPIO_InterruptConfig+0x58>
			*(NVIC_ISER1) |= (1 << (IRQNum % 32));
 8000766:	4b2e      	ldr	r3, [pc, #184]	@ (8000820 <GPIO_InterruptConfig+0xf8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	f002 021f 	and.w	r2, r2, #31
 8000770:	2101      	movs	r1, #1
 8000772:	fa01 f202 	lsl.w	r2, r1, r2
 8000776:	4611      	mov	r1, r2
 8000778:	4a29      	ldr	r2, [pc, #164]	@ (8000820 <GPIO_InterruptConfig+0xf8>)
 800077a:	430b      	orrs	r3, r1
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	e048      	b.n	8000812 <GPIO_InterruptConfig+0xea>
		} else if(IRQNum >= 64 && IRQNum <96){
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b3f      	cmp	r3, #63	@ 0x3f
 8000784:	d945      	bls.n	8000812 <GPIO_InterruptConfig+0xea>
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b5f      	cmp	r3, #95	@ 0x5f
 800078a:	d842      	bhi.n	8000812 <GPIO_InterruptConfig+0xea>
			*(NVIC_ISER2) |= (1 << (IRQNum % 64));
 800078c:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <GPIO_InterruptConfig+0xfc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	79fa      	ldrb	r2, [r7, #7]
 8000792:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000796:	2101      	movs	r1, #1
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <GPIO_InterruptConfig+0xfc>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	e035      	b.n	8000812 <GPIO_InterruptConfig+0xea>
		if(IRQNum <= 31){
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	d80c      	bhi.n	80007c6 <GPIO_InterruptConfig+0x9e>
			*(NVIC_ICERO) |= (1 << (IRQNum % 32));
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <GPIO_InterruptConfig+0x100>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	f002 021f 	and.w	r2, r2, #31
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a1a      	ldr	r2, [pc, #104]	@ (8000828 <GPIO_InterruptConfig+0x100>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	e025      	b.n	8000812 <GPIO_InterruptConfig+0xea>
		} else if(IRQNum >= 31 && IRQNum <64){
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b1e      	cmp	r3, #30
 80007ca:	d90f      	bls.n	80007ec <GPIO_InterruptConfig+0xc4>
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80007d0:	d80c      	bhi.n	80007ec <GPIO_InterruptConfig+0xc4>
			*(NVIC_ICER1) |= (1 << (IRQNum % 32));
 80007d2:	4b16      	ldr	r3, [pc, #88]	@ (800082c <GPIO_InterruptConfig+0x104>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	f002 021f 	and.w	r2, r2, #31
 80007dc:	2101      	movs	r1, #1
 80007de:	fa01 f202 	lsl.w	r2, r1, r2
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a11      	ldr	r2, [pc, #68]	@ (800082c <GPIO_InterruptConfig+0x104>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e012      	b.n	8000812 <GPIO_InterruptConfig+0xea>
		} else if(IRQNum >= 64 && IRQNum <96){
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80007f0:	d90f      	bls.n	8000812 <GPIO_InterruptConfig+0xea>
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b5f      	cmp	r3, #95	@ 0x5f
 80007f6:	d80c      	bhi.n	8000812 <GPIO_InterruptConfig+0xea>
			*(NVIC_ICER2) |= (1 << (IRQNum % 64));
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <GPIO_InterruptConfig+0x108>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000802:	2101      	movs	r1, #1
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	4611      	mov	r1, r2
 800080a:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <GPIO_InterruptConfig+0x108>)
 800080c:	430b      	orrs	r3, r1
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	e7ff      	b.n	8000812 <GPIO_InterruptConfig+0xea>
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000e104 	.word	0xe000e104
 8000824:	e000e108 	.word	0xe000e108
 8000828:	e000e180 	.word	0xe000e180
 800082c:	e000e184 	.word	0xe000e184
 8000830:	e000e188 	.word	0xe000e188

08000834 <GPIO_InterruptPriorityConfig>:
 *@Note									- One interrupt priority register is enough since only 3 interrupt set-enable registers are used.
 *										  One interrupt priority register is divided into four sections, for which each section handles one interrupt set-enable registers.
 *										  Priority bits implementation are done in most-significant bit of the section of the register, and the number of implementation is
 *										  processor specific, so kindly check MCU providers ref. manual
 */
void GPIO_InterruptPriorityConfig(uint8_t IRQNum, uint32_t IRQ_Priority){
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx 		 = IRQNum / 4; 																			// To select interrupt priority register
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNum % 4;       																	// To select section of selected interrupt priority register above
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	73bb      	strb	r3, [r7, #14]
	uint8_t amount_shift = (8 * iprx_section) + (8 - STM32F407_PR_BIT_IMPLEMENTED); 							// STM32F407_PR_BIT_IMPLEMENTED has 4 bit implementation of priority, MCU such as TI.
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	3304      	adds	r3, #4
 8000856:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQ_Priority << amount_shift);
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000860:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	7b7b      	ldrb	r3, [r7, #13]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	409a      	lsls	r2, r3
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000874:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000878:	430a      	orrs	r2, r1
 800087a:	601a      	str	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
	...

08000888 <GPIO_IRQHandler>:
*
*@return								- none
*
*@Note									- none
*/
void GPIO_IRQHandler(uint8_t PinNum){
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
	// checking the EXTI PR register corresponding to the pin number, set or not
	if(EXTI->PR & (1 << PinNum)){
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <GPIO_IRQHandler+0x3c>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	79fa      	ldrb	r2, [r7, #7]
 8000898:	2101      	movs	r1, #1
 800089a:	fa01 f202 	lsl.w	r2, r1, r2
 800089e:	4013      	ands	r3, r2
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d009      	beq.n	80008b8 <GPIO_IRQHandler+0x30>
		// Clear if set
		EXTI->PR |= (1 << PinNum);
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <GPIO_IRQHandler+0x3c>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	2101      	movs	r1, #1
 80008ac:	fa01 f202 	lsl.w	r2, r1, r2
 80008b0:	4611      	mov	r1, r2
 80008b2:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <GPIO_IRQHandler+0x3c>)
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6153      	str	r3, [r2, #20]
	}
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40013c00 	.word	0x40013c00

080008c8 <__libc_init_array>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000900 <__libc_init_array+0x38>)
 80008cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000904 <__libc_init_array+0x3c>)
 80008ce:	1b64      	subs	r4, r4, r5
 80008d0:	10a4      	asrs	r4, r4, #2
 80008d2:	2600      	movs	r6, #0
 80008d4:	42a6      	cmp	r6, r4
 80008d6:	d109      	bne.n	80008ec <__libc_init_array+0x24>
 80008d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000908 <__libc_init_array+0x40>)
 80008da:	4c0c      	ldr	r4, [pc, #48]	@ (800090c <__libc_init_array+0x44>)
 80008dc:	f000 f818 	bl	8000910 <_init>
 80008e0:	1b64      	subs	r4, r4, r5
 80008e2:	10a4      	asrs	r4, r4, #2
 80008e4:	2600      	movs	r6, #0
 80008e6:	42a6      	cmp	r6, r4
 80008e8:	d105      	bne.n	80008f6 <__libc_init_array+0x2e>
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f0:	4798      	blx	r3
 80008f2:	3601      	adds	r6, #1
 80008f4:	e7ee      	b.n	80008d4 <__libc_init_array+0xc>
 80008f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fa:	4798      	blx	r3
 80008fc:	3601      	adds	r6, #1
 80008fe:	e7f2      	b.n	80008e6 <__libc_init_array+0x1e>
 8000900:	08000928 	.word	0x08000928
 8000904:	08000928 	.word	0x08000928
 8000908:	08000928 	.word	0x08000928
 800090c:	0800092c 	.word	0x0800092c

08000910 <_init>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	bf00      	nop
 8000914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000916:	bc08      	pop	{r3}
 8000918:	469e      	mov	lr, r3
 800091a:	4770      	bx	lr

0800091c <_fini>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	bf00      	nop
 8000920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000922:	bc08      	pop	{r3}
 8000924:	469e      	mov	lr, r3
 8000926:	4770      	bx	lr
